/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.0 Tue Jan 31 21:15:06 2023.
 */

#ifndef CAN_DATABASE_H
#define CAN_DATABASE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CAN_DATABASE_M173_MODULATION_AND_FLUX_INFO_FRAME_ID (0xadu)
#define CAN_DATABASE_M172_TORQUE_AND_TIMER_INFO_FRAME_ID (0xacu)
#define CAN_DATABASE_M194_READ_WRITE_PARAM_RESPONSE_FRAME_ID (0xc2u)
#define CAN_DATABASE_M193_READ_WRITE_PARAM_COMMAND_FRAME_ID (0xc1u)
#define CAN_DATABASE_M192_COMMAND_MESSAGE_FRAME_ID (0xc0u)
#define CAN_DATABASE_M171_FAULT_CODES_FRAME_ID (0xabu)
#define CAN_DATABASE_M170_INTERNAL_STATES_FRAME_ID (0xaau)
#define CAN_DATABASE_M169_INTERNAL_VOLTAGES_FRAME_ID (0xa9u)
#define CAN_DATABASE_M168_FLUX_ID_IQ_INFO_FRAME_ID (0xa8u)
#define CAN_DATABASE_M167_VOLTAGE_INFO_FRAME_ID (0xa7u)
#define CAN_DATABASE_M166_CURRENT_INFO_FRAME_ID (0xa6u)
#define CAN_DATABASE_M165_MOTOR_POSITION_INFO_FRAME_ID (0xa5u)
#define CAN_DATABASE_M164_DIGITAL_INPUT_STATUS_FRAME_ID (0xa4u)
#define CAN_DATABASE_M163_ANALOG_INPUT_VOLTAGES_FRAME_ID (0xa3u)
#define CAN_DATABASE_M162_TEMPERATURE_SET_3_FRAME_ID (0xa2u)
#define CAN_DATABASE_M161_TEMPERATURE_SET_2_FRAME_ID (0xa1u)
#define CAN_DATABASE_M160_TEMPERATURE_SET_1_FRAME_ID (0xa0u)
#define CAN_DATABASE_M174_FIRMWARE_INFO_FRAME_ID (0xaeu)
#define CAN_DATABASE_M175_DIAG_DATA_FRAME_ID (0xafu)
#define CAN_DATABASE_BMS_CURRENT_LIMIT_FRAME_ID (0x202u)
#define CAN_DATABASE_M176_FAST_INFO_FRAME_ID (0xb0u)

/* Frame lengths in bytes. */
#define CAN_DATABASE_M173_MODULATION_AND_FLUX_INFO_LENGTH (8u)
#define CAN_DATABASE_M172_TORQUE_AND_TIMER_INFO_LENGTH (8u)
#define CAN_DATABASE_M194_READ_WRITE_PARAM_RESPONSE_LENGTH (8u)
#define CAN_DATABASE_M193_READ_WRITE_PARAM_COMMAND_LENGTH (8u)
#define CAN_DATABASE_M192_COMMAND_MESSAGE_LENGTH (8u)
#define CAN_DATABASE_M171_FAULT_CODES_LENGTH (8u)
#define CAN_DATABASE_M170_INTERNAL_STATES_LENGTH (8u)
#define CAN_DATABASE_M169_INTERNAL_VOLTAGES_LENGTH (8u)
#define CAN_DATABASE_M168_FLUX_ID_IQ_INFO_LENGTH (8u)
#define CAN_DATABASE_M167_VOLTAGE_INFO_LENGTH (8u)
#define CAN_DATABASE_M166_CURRENT_INFO_LENGTH (8u)
#define CAN_DATABASE_M165_MOTOR_POSITION_INFO_LENGTH (8u)
#define CAN_DATABASE_M164_DIGITAL_INPUT_STATUS_LENGTH (8u)
#define CAN_DATABASE_M163_ANALOG_INPUT_VOLTAGES_LENGTH (8u)
#define CAN_DATABASE_M162_TEMPERATURE_SET_3_LENGTH (8u)
#define CAN_DATABASE_M161_TEMPERATURE_SET_2_LENGTH (8u)
#define CAN_DATABASE_M160_TEMPERATURE_SET_1_LENGTH (8u)
#define CAN_DATABASE_M174_FIRMWARE_INFO_LENGTH (8u)
#define CAN_DATABASE_M175_DIAG_DATA_LENGTH (8u)
#define CAN_DATABASE_BMS_CURRENT_LIMIT_LENGTH (8u)
#define CAN_DATABASE_M176_FAST_INFO_LENGTH (8u)

/* Extended or standard frame types. */
#define CAN_DATABASE_M173_MODULATION_AND_FLUX_INFO_IS_EXTENDED (0)
#define CAN_DATABASE_M172_TORQUE_AND_TIMER_INFO_IS_EXTENDED (0)
#define CAN_DATABASE_M194_READ_WRITE_PARAM_RESPONSE_IS_EXTENDED (0)
#define CAN_DATABASE_M193_READ_WRITE_PARAM_COMMAND_IS_EXTENDED (0)
#define CAN_DATABASE_M192_COMMAND_MESSAGE_IS_EXTENDED (0)
#define CAN_DATABASE_M171_FAULT_CODES_IS_EXTENDED (0)
#define CAN_DATABASE_M170_INTERNAL_STATES_IS_EXTENDED (0)
#define CAN_DATABASE_M169_INTERNAL_VOLTAGES_IS_EXTENDED (0)
#define CAN_DATABASE_M168_FLUX_ID_IQ_INFO_IS_EXTENDED (0)
#define CAN_DATABASE_M167_VOLTAGE_INFO_IS_EXTENDED (0)
#define CAN_DATABASE_M166_CURRENT_INFO_IS_EXTENDED (0)
#define CAN_DATABASE_M165_MOTOR_POSITION_INFO_IS_EXTENDED (0)
#define CAN_DATABASE_M164_DIGITAL_INPUT_STATUS_IS_EXTENDED (0)
#define CAN_DATABASE_M163_ANALOG_INPUT_VOLTAGES_IS_EXTENDED (0)
#define CAN_DATABASE_M162_TEMPERATURE_SET_3_IS_EXTENDED (0)
#define CAN_DATABASE_M161_TEMPERATURE_SET_2_IS_EXTENDED (0)
#define CAN_DATABASE_M160_TEMPERATURE_SET_1_IS_EXTENDED (0)
#define CAN_DATABASE_M174_FIRMWARE_INFO_IS_EXTENDED (0)
#define CAN_DATABASE_M175_DIAG_DATA_IS_EXTENDED (0)
#define CAN_DATABASE_BMS_CURRENT_LIMIT_IS_EXTENDED (0)
#define CAN_DATABASE_M176_FAST_INFO_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define CAN_DATABASE_M172_TORQUE_AND_TIMER_INFO_CYCLE_TIME_MS (10u)
#define CAN_DATABASE_M192_COMMAND_MESSAGE_CYCLE_TIME_MS (10u)
#define CAN_DATABASE_M171_FAULT_CODES_CYCLE_TIME_MS (100u)
#define CAN_DATABASE_M170_INTERNAL_STATES_CYCLE_TIME_MS (100u)
#define CAN_DATABASE_M169_INTERNAL_VOLTAGES_CYCLE_TIME_MS (100u)
#define CAN_DATABASE_M168_FLUX_ID_IQ_INFO_CYCLE_TIME_MS (10u)
#define CAN_DATABASE_M167_VOLTAGE_INFO_CYCLE_TIME_MS (10u)
#define CAN_DATABASE_M166_CURRENT_INFO_CYCLE_TIME_MS (10u)
#define CAN_DATABASE_M165_MOTOR_POSITION_INFO_CYCLE_TIME_MS (10u)
#define CAN_DATABASE_M164_DIGITAL_INPUT_STATUS_CYCLE_TIME_MS (10u)
#define CAN_DATABASE_M163_ANALOG_INPUT_VOLTAGES_CYCLE_TIME_MS (10u)
#define CAN_DATABASE_M162_TEMPERATURE_SET_3_CYCLE_TIME_MS (100u)
#define CAN_DATABASE_M161_TEMPERATURE_SET_2_CYCLE_TIME_MS (100u)
#define CAN_DATABASE_M160_TEMPERATURE_SET_1_CYCLE_TIME_MS (100u)
#define CAN_DATABASE_M176_FAST_INFO_CYCLE_TIME_MS (3u)

/* Signal choices. */
#define CAN_DATABASE_M192_COMMAND_MESSAGE_VCU_INV_DIRECTION_COMMAND_CW_CHOICE (0u)
#define CAN_DATABASE_M192_COMMAND_MESSAGE_VCU_INV_DIRECTION_COMMAND_CCW_CHOICE (1u)

#define CAN_DATABASE_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_ENABLE_TURN_THE_INVERTER_OFF_CHOICE (0u)
#define CAN_DATABASE_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_ENABLE_TURN_THE__INVERTER_ON_CHOICE (1u)

#define CAN_DATABASE_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_DISCHARGE_DISCHARGE__DISABLE_CHOICE (0u)
#define CAN_DATABASE_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_DISCHARGE_DISCHARGE__ENABLE__IF_EEPROM_PARAMETER_IS_SET__CHOICE (1u)

#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_VSM__START__STATE_CHOICE (0u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_PRE__CHARGE__INIT_STATE_CHOICE (1u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_PRE_CHARGE_ACTIVE_STATE_CHOICE (2u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_PRE_CHARGE_COMPLETE_STATE_CHOICE (3u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_VSM_WAIT_STATE_CHOICE (4u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_VSM_READY_STATE_CHOICE (5u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_MOTOR__RUNNING__STATE_CHOICE (6u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_BLINK_FAULT_CODE_STATE_CHOICE (7u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_SHUTDOWN_STATE_FOR__KEY__SWITCH__MODE_1_CHOICE (14u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_VSM_STATE_RESET_THE_INVERTER_CHOICE (15u)

#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_POWER_UP_CHOICE (0u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_STOP_CHOICE (1u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_OPEN__LOOP_CHOICE (2u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_CLOSED__LOOP_CHOICE (3u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_4_CHOICE (4u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_5_CHOICE (5u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_6_CHOICE (6u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_7_CHOICE (7u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_IDLE__RUN_CHOICE (8u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_IDLE__STOP_CHOICE (9u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_10_CHOICE (10u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERN__STATE_CHOICE (11u)
#define CAN_DATABASE_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_12_CHOICE (12u)

/**
 * Signals in message M173_Modulation_And_Flux_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m173_modulation_and_flux_info_t {
    /**
     * This is the modulation index. The scale factor is x100. To get the actual modulation index divide the value by 100.
     *
     * Range: -32768..32767 (-3.2768..3.2767 -)
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t inv_modulation_index;

    /**
     * This is the current output of the flux regulator.
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_flux_weakening_output;

    /**
     * The commanded D-axis current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_id_command;

    /**
     * The commanded Q-axis current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_iq_command;
};

/**
 * Signals in message M172_Torque_And_Timer_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m172_torque_and_timer_info_t {
    /**
     * The commanded Torque
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_commanded_torque;

    /**
     * Estimated motor torque feedback
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_torque_feedback;

    /**
     * Updated every 3 msec. This will roll over in approximately 150 days!
     *
     * Range: 0..4294933333.333333333333333333 (0..12884800 time:second)
     * Scale: 0.003
     * Offset: 0
     */
    uint32_t inv_power_on_timer;
};

/**
 * Signals in message M194_Read_Write_Param_Response.
 *
 * To write a parameter use message 0x0C1 with byte #2 set to 1 (write). 
To read a parameter use message 0x0C1 with byte #2 to set 0 (read). 
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m194_read_write_param_response_t {
    /**
     * Address of parameter response message data.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_parameter_response_addr;

    /**
     * 0=Write failure, 1=Success
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_parameter_response_write_ok;

    /**
     * Data from parameter message.  All data is 16 bits and is contained in bytes 4 and 5. Bytes 6 and 7 should be ignored.
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_parameter_response_data;
};

/**
 * Signals in message M193_Read_Write_Param_Command.
 *
 * To write a parameter use message 0x0C1 with byte #2 set to 1 (write). 
To read a parameter use message 0x0C1 with byte #2 to set 0 (read). 
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m193_read_write_param_command_t {
    /**
     * Address of parameter to be written or read.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcu_inv_parameter_address;

    /**
     * 0=Read, 1=Write
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_parameter_rw_command;

    /**
     * Data to be written.  All data is 16 bits and is contained in bytes 4 and 5.
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_inv_parameter_data;
};

/**
 * Signals in message M192_Command_Message.
 *
 * The command message is used to transmit data to the controller. This message is sent from a user supplied external controller to the PMxxx controller.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m192_command_message_t {
    /**
     * Torque command when in torque mode
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vcu_inv_torque_command;

    /**
     * Speed command used when in speed mode
     *
     * Range: -32768..32767 (-32768..32767 angular_speed:rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_inv_speed_command;

    /**
     * 0=Reverse, 1=Forward.  Forward is positive motor speed.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_direction_command;

    /**
     * 0=Inverter OFF, 1 = Inverter ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_inverter_enable;

    /**
     * 0=Discharge Disable,1=Discharge Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_inverter_discharge;

    /**
     * 0 = No change to mode, 1 = change to speed mode from torque mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_speed_mode_enable;

    /**
     * 0 = Use run table, 1 = Use heater table
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_heater_mode_enable;

    /**
     * Torque Limit, set to 0 to keep default
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vcu_inv_torque_limit_command;
};

/**
 * Signals in message M171_Fault_Codes.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m171_fault_codes_t {
    /**
     * Each bit represents a fault. Please refer to PM100 Users Manual for details.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_post_fault_lo;

    /**
     * Each bit represents a fault. Please refer to PM100 Users Manual for details.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_post_fault_hi;

    /**
     * Each bit represents a fault. Please refer to PM100 Users Manual for details.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_run_fault_lo;

    /**
     * Each bit represents a fault. Please refer to PM100 Users Manual for details.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_run_fault_hi;
};

/**
 * Signals in message M170_Internal_States.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m170_internal_states_t {
    /**
     * Different states for the vehicle state machine
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_vsm_state;

    /**
     * The current active PWM frequency
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_pwm_frequency;

    /**
     * Different states for the inverter state machine
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_state;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_1_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_2_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_3_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_4_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_5_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_6_status;

    /**
     * 0=Torque Mode, 1=Speed Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_run_mode;

    /**
     * 0 = Disabled, 1 = Enabled, 2 = Speed Check, 3 = Active, 4 = Complete
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_discharge_state;

    /**
     * 0=CAN mode, 1=VSM mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_command_mode;

    /**
     * Rolling Counter value
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_rolling_counter;

    /**
     * 0=Inverter Disabled,
     * 1=Inverter Enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_enable_state;

    /**
     * 0=Lockout Disabled, 1=Lockout Enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_enable_lockout;

    /**
     * 1 = Forward
     * 0 = 'Reverse' if inverter enabled  & 'Stopped' if inverter is disabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_direction_command;

    /**
     * 0 = BMS Not Active, 1 = BMS Active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_bms_active;

    /**
     * 0 = Not Limiting, 1 = Limiting
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_bms_torque_limiting;

    /**
     * Indicates that torque is being modified to limit the speed.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_limit_max_speed;

    /**
     * Indicates that torque is being limited to limit the hot spot temp
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_limit_hot_spot;

    /**
     * Indicates that motor current is being limited due to low motor electrical frequency.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_low_speed_limiting;

    /**
     * 0 = Not limiting, 1 = Limiting
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_limit_coolant_derating;
};

/**
 * Signals in message M169_Internal_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m169_internal_voltages_t {
    /**
     * Internal reference voltage
     *
     * Range: -32768..32767 (-327.68..327.67 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t inv_ref_voltage_1_5;

    /**
     * Internal reference voltage
     *
     * Range: -32768..32767 (-327.68..327.67 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t inv_ref_voltage_2_5;

    /**
     * Transducer voltage
     *
     * Range: -32768..32767 (-327.68..327.67 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t inv_ref_voltage_5_0;

    /**
     * 12V Input Voltage
     *
     * Range: -32768..32767 (-327.68..327.67 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t inv_ref_voltage_12_0;
};

/**
 * Signals in message M168_Flux_ID_IQ_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m168_flux_id_iq_info_t {
    /**
     * The commanded flux
     *
     * Range: -32768..32767 (-32.768..32.767 flux:Wb)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t inv_flux_command;

    /**
     * The estimated flux
     *
     * Range: -32768..32767 (-32.768..32.767 flux:Wb)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t inv_flux_feedback;

    /**
     * The measured Id current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_id;

    /**
     * The measured Iq current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_iq;
};

/**
 * Signals in message M167_Voltage_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m167_voltage_info_t {
    /**
     * The actual measured value of the DC bus voltage
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_dc_bus_voltage;

    /**
     * The calculated value of the output voltage, in peak line-neutral volts
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_output_voltage;

    /**
     * Measured value of the voltage betwen phase A and Phase B
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_vab_vd_voltage;

    /**
     * Measured value of the voltage between Phase B and Phase C
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_vbc_vq_voltage;
};

/**
 * Signals in message M166_Current_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m166_current_info_t {
    /**
     * The measured value of Phase A current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_phase_a_current;

    /**
     * The measured value of Phase B current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_phase_b_current;

    /**
     * The measured value of Phase C current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_phase_c_current;

    /**
     * The Calculated DC Bus Current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_dc_bus_current;
};

/**
 * Signals in message M165_Motor_Position_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m165_motor_position_info_t {
    /**
     * The Electrical Angle of the motor as read by the encoder or resolver
     *
     * Range: 0..65535 (0..6553.5 angle:deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t inv_motor_angle_electrical;

    /**
     * The measured speed of the motor
     *
     * Range: -32768..32767 (-32768..32767 angular_speed:rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_motor_speed;

    /**
     * The actual electrical frequency of the inverter
     *
     * Range: -32768..32767 (-3276.8..3276.7 frequency:Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_electrical_output_frequency;

    /**
     * Used in calibration of resolver angle adjustment.
     *
     * Range: -32768..32767 (-3276.8..3276.7 angle:deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_delta_resolver_filtered;
};

/**
 * Signals in message M164_Digital_Input_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m164_digital_input_status_t {
    /**
     * Status of Digital Input #1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_1;

    /**
     * Status of Digital Input #2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_2;

    /**
     * Status of Digital Input #3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_3;

    /**
     * Status of Digital Input #4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_4;

    /**
     * Status of Digital Input #5
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_5;

    /**
     * Status of Digital Input #6
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_6;

    /**
     * Status of Digital Input #7
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_7;

    /**
     * Status of Digital Input #8
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_8;
};

/**
 * Signals in message M163_Analog_Input_Voltages.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m163_analog_input_voltages_t {
    /**
     * Voltage on Analog Input #1
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_1;

    /**
     * Voltage on Analog Input #2
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_2;

    /**
     * Voltage on Analog Input #3
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_3;

    /**
     * Voltage on Analog Input #4
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_4;

    /**
     * Voltage on Analog Input #5
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_5;

    /**
     * Voltage on Analog Input #6
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_6;
};

/**
 * Signals in message M162_Temperature_Set_3.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m162_temperature_set_3_t {
    /**
     * Estimated Coolant Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_coolant_temp;

    /**
     * Estimated inverter hot spot temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_hot_spot_temp;

    /**
     * Motor Temperature Sensor
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_motor_temp;

    /**
     * Shudder compensation value of torque
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_torque_shudder;
};

/**
 * Signals in message M161_Temperature_Set_2.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m161_temperature_set_2_t {
    /**
     * Control Board Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_control_board_temp;

    /**
     * RTD input 1 (PT1000) Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_rtd1_temperature;

    /**
     * RTD input 2 (PT1000) Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_rtd2_temperature;
};

/**
 * Signals in message M160_Temperature_Set_1.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m160_temperature_set_1_t {
    /**
     * IGBT Module A Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_module_a_temp;

    /**
     * IGBT Module B Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_module_b_temp;

    /**
     * IGBT Module C Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_module_c_temp;

    /**
     * Gate Driver Board Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_gate_driver_board_temp;
};

/**
 * Signals in message M174_Firmware_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m174_firmware_info_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_project_code_eep_ver;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_sw_version;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_date_code_mmdd;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_date_code_yyyy;
};

/**
 * Signals in message M175_Diag_Data.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m175_diag_data_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_diag_buffer_record;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_diag_buffer_segment;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_diag_data_1;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_diag_data_2;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_diag_data_3;
};

/**
 * Signals in message BMS_Current_Limit.
 *
 * Sent by BMS
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_bms_current_limit_t {
    /**
     * Maximum discharge current from BMS
     *
     * Range: 0..1000 (0..1000 current:A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_max_discharge_current;

    /**
     * Maximum charge current from BMS
     *
     * Range: 0..1000 (0..1000 current:A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_max_charge_current;
};

/**
 * Signals in message M176_Fast_Info.
 *
 * To enable fast message set CAN ACTIVE MSGS HI WORD to 0xFFFE.  Setting to default value of 0xFFFF will disable the fast message.
 *
 * All signal values are as on the CAN bus.
 */
struct can_database_m176_fast_info_t {
    /**
     * The commanded torque
     *
     * Range: -32768..327677 (-3276.8..32767.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_fast_torque_command;

    /**
     * The estimated torque
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_fast_torque_feedback;

    /**
     * Motor speed
     *
     * Range: -32768..32767 (-32768..32767 angular_speed:rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_fast_motor_speed;

    /**
     * DC Bus Voltage
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_fast_dc_bus_voltage;
};

/**
 * Pack message M173_Modulation_And_Flux_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m173_modulation_and_flux_info_pack(
    uint8_t *dst_p,
    const struct can_database_m173_modulation_and_flux_info_t *src_p,
    size_t size);

/**
 * Unpack message M173_Modulation_And_Flux_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m173_modulation_and_flux_info_unpack(
    struct can_database_m173_modulation_and_flux_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m173_modulation_and_flux_info_inv_modulation_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m173_modulation_and_flux_info_inv_modulation_index_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m173_modulation_and_flux_info_inv_modulation_index_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m173_modulation_and_flux_info_inv_flux_weakening_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m173_modulation_and_flux_info_inv_flux_weakening_output_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m173_modulation_and_flux_info_inv_flux_weakening_output_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m173_modulation_and_flux_info_inv_id_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m173_modulation_and_flux_info_inv_id_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m173_modulation_and_flux_info_inv_id_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m173_modulation_and_flux_info_inv_iq_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m173_modulation_and_flux_info_inv_iq_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m173_modulation_and_flux_info_inv_iq_command_is_in_range(int16_t value);

/**
 * Pack message M172_Torque_And_Timer_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m172_torque_and_timer_info_pack(
    uint8_t *dst_p,
    const struct can_database_m172_torque_and_timer_info_t *src_p,
    size_t size);

/**
 * Unpack message M172_Torque_And_Timer_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m172_torque_and_timer_info_unpack(
    struct can_database_m172_torque_and_timer_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m172_torque_and_timer_info_inv_commanded_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m172_torque_and_timer_info_inv_commanded_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m172_torque_and_timer_info_inv_commanded_torque_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m172_torque_and_timer_info_inv_torque_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m172_torque_and_timer_info_inv_torque_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m172_torque_and_timer_info_inv_torque_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can_database_m172_torque_and_timer_info_inv_power_on_timer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m172_torque_and_timer_info_inv_power_on_timer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m172_torque_and_timer_info_inv_power_on_timer_is_in_range(uint32_t value);

/**
 * Pack message M194_Read_Write_Param_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m194_read_write_param_response_pack(
    uint8_t *dst_p,
    const struct can_database_m194_read_write_param_response_t *src_p,
    size_t size);

/**
 * Unpack message M194_Read_Write_Param_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m194_read_write_param_response_unpack(
    struct can_database_m194_read_write_param_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m194_read_write_param_response_inv_parameter_response_addr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m194_read_write_param_response_inv_parameter_response_addr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m194_read_write_param_response_inv_parameter_response_addr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m194_read_write_param_response_inv_parameter_response_write_ok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m194_read_write_param_response_inv_parameter_response_write_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m194_read_write_param_response_inv_parameter_response_write_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m194_read_write_param_response_inv_parameter_response_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m194_read_write_param_response_inv_parameter_response_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m194_read_write_param_response_inv_parameter_response_data_is_in_range(int16_t value);

/**
 * Pack message M193_Read_Write_Param_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m193_read_write_param_command_pack(
    uint8_t *dst_p,
    const struct can_database_m193_read_write_param_command_t *src_p,
    size_t size);

/**
 * Unpack message M193_Read_Write_Param_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m193_read_write_param_command_unpack(
    struct can_database_m193_read_write_param_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m193_read_write_param_command_vcu_inv_parameter_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m193_read_write_param_command_vcu_inv_parameter_address_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m193_read_write_param_command_vcu_inv_parameter_address_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m193_read_write_param_command_vcu_inv_parameter_rw_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m193_read_write_param_command_vcu_inv_parameter_rw_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m193_read_write_param_command_vcu_inv_parameter_rw_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m193_read_write_param_command_vcu_inv_parameter_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m193_read_write_param_command_vcu_inv_parameter_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m193_read_write_param_command_vcu_inv_parameter_data_is_in_range(int16_t value);

/**
 * Pack message M192_Command_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m192_command_message_pack(
    uint8_t *dst_p,
    const struct can_database_m192_command_message_t *src_p,
    size_t size);

/**
 * Unpack message M192_Command_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m192_command_message_unpack(
    struct can_database_m192_command_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m192_command_message_vcu_inv_torque_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m192_command_message_vcu_inv_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m192_command_message_vcu_inv_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m192_command_message_vcu_inv_speed_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m192_command_message_vcu_inv_speed_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m192_command_message_vcu_inv_speed_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m192_command_message_vcu_inv_direction_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m192_command_message_vcu_inv_direction_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m192_command_message_vcu_inv_direction_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m192_command_message_vcu_inv_inverter_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m192_command_message_vcu_inv_inverter_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m192_command_message_vcu_inv_inverter_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m192_command_message_vcu_inv_inverter_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m192_command_message_vcu_inv_inverter_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m192_command_message_vcu_inv_inverter_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m192_command_message_vcu_inv_speed_mode_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m192_command_message_vcu_inv_speed_mode_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m192_command_message_vcu_inv_speed_mode_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m192_command_message_vcu_inv_heater_mode_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m192_command_message_vcu_inv_heater_mode_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m192_command_message_vcu_inv_heater_mode_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m192_command_message_vcu_inv_torque_limit_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m192_command_message_vcu_inv_torque_limit_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m192_command_message_vcu_inv_torque_limit_command_is_in_range(int16_t value);

/**
 * Pack message M171_Fault_Codes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m171_fault_codes_pack(
    uint8_t *dst_p,
    const struct can_database_m171_fault_codes_t *src_p,
    size_t size);

/**
 * Unpack message M171_Fault_Codes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m171_fault_codes_unpack(
    struct can_database_m171_fault_codes_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m171_fault_codes_inv_post_fault_lo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m171_fault_codes_inv_post_fault_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m171_fault_codes_inv_post_fault_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m171_fault_codes_inv_post_fault_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m171_fault_codes_inv_post_fault_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m171_fault_codes_inv_post_fault_hi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m171_fault_codes_inv_run_fault_lo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m171_fault_codes_inv_run_fault_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m171_fault_codes_inv_run_fault_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m171_fault_codes_inv_run_fault_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m171_fault_codes_inv_run_fault_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m171_fault_codes_inv_run_fault_hi_is_in_range(uint16_t value);

/**
 * Pack message M170_Internal_States.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m170_internal_states_pack(
    uint8_t *dst_p,
    const struct can_database_m170_internal_states_t *src_p,
    size_t size);

/**
 * Unpack message M170_Internal_States.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m170_internal_states_unpack(
    struct can_database_m170_internal_states_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_vsm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_vsm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_vsm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_pwm_frequency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_pwm_frequency_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_pwm_frequency_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_inverter_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_inverter_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_inverter_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_relay_1_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_relay_1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_relay_1_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_relay_2_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_relay_2_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_relay_2_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_relay_3_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_relay_3_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_relay_3_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_relay_4_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_relay_4_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_relay_4_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_relay_5_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_relay_5_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_relay_5_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_relay_6_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_relay_6_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_relay_6_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_inverter_run_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_inverter_run_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_inverter_run_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_inverter_discharge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_inverter_discharge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_inverter_discharge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_inverter_command_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_inverter_command_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_inverter_command_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_inverter_enable_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_inverter_enable_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_inverter_enable_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_inverter_enable_lockout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_inverter_enable_lockout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_inverter_enable_lockout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_direction_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_direction_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_direction_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_bms_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_bms_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_bms_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_bms_torque_limiting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_bms_torque_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_bms_torque_limiting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_limit_max_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_limit_max_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_limit_max_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_limit_hot_spot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_limit_hot_spot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_limit_hot_spot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_low_speed_limiting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_low_speed_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_low_speed_limiting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m170_internal_states_inv_limit_coolant_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m170_internal_states_inv_limit_coolant_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m170_internal_states_inv_limit_coolant_derating_is_in_range(uint8_t value);

/**
 * Pack message M169_Internal_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m169_internal_voltages_pack(
    uint8_t *dst_p,
    const struct can_database_m169_internal_voltages_t *src_p,
    size_t size);

/**
 * Unpack message M169_Internal_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m169_internal_voltages_unpack(
    struct can_database_m169_internal_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m169_internal_voltages_inv_ref_voltage_1_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m169_internal_voltages_inv_ref_voltage_1_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m169_internal_voltages_inv_ref_voltage_1_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m169_internal_voltages_inv_ref_voltage_2_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m169_internal_voltages_inv_ref_voltage_2_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m169_internal_voltages_inv_ref_voltage_2_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m169_internal_voltages_inv_ref_voltage_5_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m169_internal_voltages_inv_ref_voltage_5_0_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m169_internal_voltages_inv_ref_voltage_5_0_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m169_internal_voltages_inv_ref_voltage_12_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m169_internal_voltages_inv_ref_voltage_12_0_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m169_internal_voltages_inv_ref_voltage_12_0_is_in_range(int16_t value);

/**
 * Pack message M168_Flux_ID_IQ_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m168_flux_id_iq_info_pack(
    uint8_t *dst_p,
    const struct can_database_m168_flux_id_iq_info_t *src_p,
    size_t size);

/**
 * Unpack message M168_Flux_ID_IQ_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m168_flux_id_iq_info_unpack(
    struct can_database_m168_flux_id_iq_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m168_flux_id_iq_info_inv_flux_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m168_flux_id_iq_info_inv_flux_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m168_flux_id_iq_info_inv_flux_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m168_flux_id_iq_info_inv_flux_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m168_flux_id_iq_info_inv_flux_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m168_flux_id_iq_info_inv_flux_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m168_flux_id_iq_info_inv_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m168_flux_id_iq_info_inv_id_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m168_flux_id_iq_info_inv_id_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m168_flux_id_iq_info_inv_iq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m168_flux_id_iq_info_inv_iq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m168_flux_id_iq_info_inv_iq_is_in_range(int16_t value);

/**
 * Pack message M167_Voltage_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m167_voltage_info_pack(
    uint8_t *dst_p,
    const struct can_database_m167_voltage_info_t *src_p,
    size_t size);

/**
 * Unpack message M167_Voltage_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m167_voltage_info_unpack(
    struct can_database_m167_voltage_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m167_voltage_info_inv_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m167_voltage_info_inv_dc_bus_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m167_voltage_info_inv_dc_bus_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m167_voltage_info_inv_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m167_voltage_info_inv_output_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m167_voltage_info_inv_output_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m167_voltage_info_inv_vab_vd_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m167_voltage_info_inv_vab_vd_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m167_voltage_info_inv_vab_vd_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m167_voltage_info_inv_vbc_vq_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m167_voltage_info_inv_vbc_vq_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m167_voltage_info_inv_vbc_vq_voltage_is_in_range(int16_t value);

/**
 * Pack message M166_Current_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m166_current_info_pack(
    uint8_t *dst_p,
    const struct can_database_m166_current_info_t *src_p,
    size_t size);

/**
 * Unpack message M166_Current_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m166_current_info_unpack(
    struct can_database_m166_current_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m166_current_info_inv_phase_a_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m166_current_info_inv_phase_a_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m166_current_info_inv_phase_a_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m166_current_info_inv_phase_b_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m166_current_info_inv_phase_b_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m166_current_info_inv_phase_b_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m166_current_info_inv_phase_c_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m166_current_info_inv_phase_c_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m166_current_info_inv_phase_c_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m166_current_info_inv_dc_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m166_current_info_inv_dc_bus_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m166_current_info_inv_dc_bus_current_is_in_range(int16_t value);

/**
 * Pack message M165_Motor_Position_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m165_motor_position_info_pack(
    uint8_t *dst_p,
    const struct can_database_m165_motor_position_info_t *src_p,
    size_t size);

/**
 * Unpack message M165_Motor_Position_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m165_motor_position_info_unpack(
    struct can_database_m165_motor_position_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m165_motor_position_info_inv_motor_angle_electrical_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m165_motor_position_info_inv_motor_angle_electrical_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m165_motor_position_info_inv_motor_angle_electrical_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m165_motor_position_info_inv_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m165_motor_position_info_inv_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m165_motor_position_info_inv_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m165_motor_position_info_inv_electrical_output_frequency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m165_motor_position_info_inv_electrical_output_frequency_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m165_motor_position_info_inv_electrical_output_frequency_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m165_motor_position_info_inv_delta_resolver_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m165_motor_position_info_inv_delta_resolver_filtered_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m165_motor_position_info_inv_delta_resolver_filtered_is_in_range(int16_t value);

/**
 * Pack message M164_Digital_Input_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m164_digital_input_status_pack(
    uint8_t *dst_p,
    const struct can_database_m164_digital_input_status_t *src_p,
    size_t size);

/**
 * Unpack message M164_Digital_Input_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m164_digital_input_status_unpack(
    struct can_database_m164_digital_input_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m164_digital_input_status_inv_digital_input_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m164_digital_input_status_inv_digital_input_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m164_digital_input_status_inv_digital_input_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m164_digital_input_status_inv_digital_input_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m164_digital_input_status_inv_digital_input_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m164_digital_input_status_inv_digital_input_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m164_digital_input_status_inv_digital_input_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m164_digital_input_status_inv_digital_input_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m164_digital_input_status_inv_digital_input_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m164_digital_input_status_inv_digital_input_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m164_digital_input_status_inv_digital_input_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m164_digital_input_status_inv_digital_input_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m164_digital_input_status_inv_digital_input_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m164_digital_input_status_inv_digital_input_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m164_digital_input_status_inv_digital_input_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m164_digital_input_status_inv_digital_input_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m164_digital_input_status_inv_digital_input_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m164_digital_input_status_inv_digital_input_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m164_digital_input_status_inv_digital_input_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m164_digital_input_status_inv_digital_input_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m164_digital_input_status_inv_digital_input_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m164_digital_input_status_inv_digital_input_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m164_digital_input_status_inv_digital_input_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m164_digital_input_status_inv_digital_input_8_is_in_range(uint8_t value);

/**
 * Pack message M163_Analog_Input_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m163_analog_input_voltages_pack(
    uint8_t *dst_p,
    const struct can_database_m163_analog_input_voltages_t *src_p,
    size_t size);

/**
 * Unpack message M163_Analog_Input_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m163_analog_input_voltages_unpack(
    struct can_database_m163_analog_input_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m163_analog_input_voltages_inv_analog_input_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m163_analog_input_voltages_inv_analog_input_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m163_analog_input_voltages_inv_analog_input_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m163_analog_input_voltages_inv_analog_input_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m163_analog_input_voltages_inv_analog_input_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m163_analog_input_voltages_inv_analog_input_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m163_analog_input_voltages_inv_analog_input_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m163_analog_input_voltages_inv_analog_input_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m163_analog_input_voltages_inv_analog_input_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m163_analog_input_voltages_inv_analog_input_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m163_analog_input_voltages_inv_analog_input_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m163_analog_input_voltages_inv_analog_input_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m163_analog_input_voltages_inv_analog_input_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m163_analog_input_voltages_inv_analog_input_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m163_analog_input_voltages_inv_analog_input_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m163_analog_input_voltages_inv_analog_input_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m163_analog_input_voltages_inv_analog_input_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m163_analog_input_voltages_inv_analog_input_6_is_in_range(uint16_t value);

/**
 * Pack message M162_Temperature_Set_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m162_temperature_set_3_pack(
    uint8_t *dst_p,
    const struct can_database_m162_temperature_set_3_t *src_p,
    size_t size);

/**
 * Unpack message M162_Temperature_Set_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m162_temperature_set_3_unpack(
    struct can_database_m162_temperature_set_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m162_temperature_set_3_inv_coolant_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m162_temperature_set_3_inv_coolant_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m162_temperature_set_3_inv_coolant_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m162_temperature_set_3_inv_hot_spot_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m162_temperature_set_3_inv_hot_spot_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m162_temperature_set_3_inv_hot_spot_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m162_temperature_set_3_inv_motor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m162_temperature_set_3_inv_motor_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m162_temperature_set_3_inv_motor_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m162_temperature_set_3_inv_torque_shudder_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m162_temperature_set_3_inv_torque_shudder_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m162_temperature_set_3_inv_torque_shudder_is_in_range(int16_t value);

/**
 * Pack message M161_Temperature_Set_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m161_temperature_set_2_pack(
    uint8_t *dst_p,
    const struct can_database_m161_temperature_set_2_t *src_p,
    size_t size);

/**
 * Unpack message M161_Temperature_Set_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m161_temperature_set_2_unpack(
    struct can_database_m161_temperature_set_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m161_temperature_set_2_inv_control_board_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m161_temperature_set_2_inv_control_board_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m161_temperature_set_2_inv_control_board_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m161_temperature_set_2_inv_rtd1_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m161_temperature_set_2_inv_rtd1_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m161_temperature_set_2_inv_rtd1_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m161_temperature_set_2_inv_rtd2_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m161_temperature_set_2_inv_rtd2_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m161_temperature_set_2_inv_rtd2_temperature_is_in_range(int16_t value);

/**
 * Pack message M160_Temperature_Set_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m160_temperature_set_1_pack(
    uint8_t *dst_p,
    const struct can_database_m160_temperature_set_1_t *src_p,
    size_t size);

/**
 * Unpack message M160_Temperature_Set_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m160_temperature_set_1_unpack(
    struct can_database_m160_temperature_set_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m160_temperature_set_1_inv_module_a_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m160_temperature_set_1_inv_module_a_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m160_temperature_set_1_inv_module_a_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m160_temperature_set_1_inv_module_b_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m160_temperature_set_1_inv_module_b_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m160_temperature_set_1_inv_module_b_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m160_temperature_set_1_inv_module_c_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m160_temperature_set_1_inv_module_c_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m160_temperature_set_1_inv_module_c_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m160_temperature_set_1_inv_gate_driver_board_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m160_temperature_set_1_inv_gate_driver_board_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m160_temperature_set_1_inv_gate_driver_board_temp_is_in_range(int16_t value);

/**
 * Pack message M174_Firmware_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m174_firmware_info_pack(
    uint8_t *dst_p,
    const struct can_database_m174_firmware_info_t *src_p,
    size_t size);

/**
 * Unpack message M174_Firmware_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m174_firmware_info_unpack(
    struct can_database_m174_firmware_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m174_firmware_info_inv_project_code_eep_ver_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m174_firmware_info_inv_project_code_eep_ver_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m174_firmware_info_inv_project_code_eep_ver_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m174_firmware_info_inv_sw_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m174_firmware_info_inv_sw_version_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m174_firmware_info_inv_sw_version_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m174_firmware_info_inv_date_code_mmdd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m174_firmware_info_inv_date_code_mmdd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m174_firmware_info_inv_date_code_mmdd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_m174_firmware_info_inv_date_code_yyyy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m174_firmware_info_inv_date_code_yyyy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m174_firmware_info_inv_date_code_yyyy_is_in_range(uint16_t value);

/**
 * Pack message M175_Diag_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m175_diag_data_pack(
    uint8_t *dst_p,
    const struct can_database_m175_diag_data_t *src_p,
    size_t size);

/**
 * Unpack message M175_Diag_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m175_diag_data_unpack(
    struct can_database_m175_diag_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m175_diag_data_inv_diag_buffer_record_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m175_diag_data_inv_diag_buffer_record_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m175_diag_data_inv_diag_buffer_record_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_database_m175_diag_data_inv_diag_buffer_segment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m175_diag_data_inv_diag_buffer_segment_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m175_diag_data_inv_diag_buffer_segment_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m175_diag_data_inv_diag_data_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m175_diag_data_inv_diag_data_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m175_diag_data_inv_diag_data_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m175_diag_data_inv_diag_data_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m175_diag_data_inv_diag_data_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m175_diag_data_inv_diag_data_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m175_diag_data_inv_diag_data_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m175_diag_data_inv_diag_data_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m175_diag_data_inv_diag_data_3_is_in_range(int16_t value);

/**
 * Pack message BMS_Current_Limit.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_bms_current_limit_pack(
    uint8_t *dst_p,
    const struct can_database_bms_current_limit_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Current_Limit.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_bms_current_limit_unpack(
    struct can_database_bms_current_limit_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_bms_current_limit_bms_max_discharge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_bms_current_limit_bms_max_discharge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_bms_current_limit_bms_max_discharge_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_database_bms_current_limit_bms_max_charge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_bms_current_limit_bms_max_charge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_bms_current_limit_bms_max_charge_current_is_in_range(uint16_t value);

/**
 * Pack message M176_Fast_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_database_m176_fast_info_pack(
    uint8_t *dst_p,
    const struct can_database_m176_fast_info_t *src_p,
    size_t size);

/**
 * Unpack message M176_Fast_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_database_m176_fast_info_unpack(
    struct can_database_m176_fast_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m176_fast_info_inv_fast_torque_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m176_fast_info_inv_fast_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m176_fast_info_inv_fast_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m176_fast_info_inv_fast_torque_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m176_fast_info_inv_fast_torque_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m176_fast_info_inv_fast_torque_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m176_fast_info_inv_fast_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m176_fast_info_inv_fast_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m176_fast_info_inv_fast_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can_database_m176_fast_info_inv_fast_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_database_m176_fast_info_inv_fast_dc_bus_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_database_m176_fast_info_inv_fast_dc_bus_voltage_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
